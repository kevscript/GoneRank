### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  access_token: String
  expires_at: Int
  id: ID!
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

type Club {
  abbreviation: String!
  id: ID!
  matches: [Match!]!
  name: String!
  primary: String!
  secondary: String!
}

type Competition {
  abbreviation: String!
  id: ID!
  matches: [Match!]!
  name: String!
}

input CreateClubInput {
  abbreviation: String!
  name: String!
  primary: String!
  secondary: String!
}

input CreateCompetitionInput {
  abbreviation: String!
  name: String!
}

input CreateMatchInput {
  active: Boolean
  archived: Boolean
  competitionId: String!
  conceeded: Int!
  date: DateTime!
  home: Boolean
  opponentId: String!
  scored: Int!
  seasonId: String!
}

input CreatePlayerInput {
  active: Boolean
  birthDate: DateTime!
  country: String
  countryCode: String
  firstName: String!
  image: String
  lastName: String!
}

input CreateSeasonInput {
  startDate: DateTime!
}

input CreateUserRatingsInput {
  playerId: String!
  rating: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Match {
  active: Boolean!
  archived: Boolean!
  competition: Competition!
  competitionId: String!
  conceeded: Int!
  date: DateTime!
  home: Boolean!
  id: ID!
  opponent: Club!
  opponentId: String!
  players: [MatchPlayer!]!
  ratings: [Rating!]!
  scored: Int!
  season: Season!
  seasonId: String!
}

type MatchPlayer {
  id: ID!
  match: Match!
  matchId: String!
  player: Player!
  playerId: String!
}

type Mutation {
  createClub(data: CreateClubInput!): Club!
  createCompetition(data: CreateCompetitionInput!): Competition!
  createMatch(data: CreateMatchInput!): Match!
  createPlayer(data: CreatePlayerInput!): Player!
  createSeason(data: CreateSeasonInput!): Season!
  createUserRatings(matchId: String!, ratings: [CreateUserRatingsInput!]!, userId: String!): [Rating!]!
  deleteClub(id: String!): Club!
  deleteCompetition(id: String!): Competition!
  deleteMatch(id: String!): Match!
  deletePlayer(id: String!): Player!
  deleteSeason(id: String!): Season!
  deleteUser(id: String!): User!
  updateClub(data: UpdateClubInput!, id: String!): Club!
  updateCompetition(data: UpdateCompetitionInput!, id: String!): Competition!
  updateMatch(data: UpdateMatchInput!, id: String!): Match!
  updateMatchPlayers(matchId: String!, playerIds: [String!]!): [MatchPlayer!]!
  updatePlayer(data: UpdatePlayerInput!, id: String!): Player!
  updateSeason(data: UpdateSeasonInput!, id: String!): Season!
  updateUser(id: String!, input: UpdateUserInput!): User!
}

type Player {
  active: Boolean!
  birthDate: DateTime!
  country: String!
  countryCode: String!
  firstName: String!
  id: ID!
  image: String!
  lastName: String!
  matches: [MatchPlayer!]!
  ratings: [Rating!]!
}

type Query {
  club(id: String!): Club!
  clubs: [Club!]!
  competition(id: String!): Competition!
  competitions: [Competition!]!
  match(id: String!): Match!
  matchPlayer(matchId: String!, playerId: String!): MatchPlayer!
  matchPlayers(matchId: String, playerId: String): [MatchPlayer!]!
  matches: [Match!]!
  player(id: String!): Player!
  players: [Player!]!
  rating(matchId: String!, playerId: String!, userId: String!): Rating!
  ratings(matchId: String, playerId: String, userId: String): [Rating!]!
  season(id: String!): Season!
  seasons: [Season!]!
  user(id: String!): User!
  users: [User!]!
}

type Rating {
  id: ID!
  match: Match!
  matchId: String!
  player: Player!
  playerId: String!
  rating: Float!
  user: User!
  userId: String!
}

enum Role {
  ADMIN
  USER
}

type Season {
  id: ID!
  matches: [Match!]!
  startDate: DateTime!
}

type Session {
  expires: DateTime!
  id: ID!
  sessionToken: String!
  user: User!
  userId: String!
}

input UpdateClubInput {
  abbreviation: String
  name: String
  primary: String
  secondary: String
}

input UpdateCompetitionInput {
  abbreviation: String
  name: String
}

input UpdateMatchInput {
  active: Boolean
  archived: Boolean
  competitionId: String
  conceeded: Int
  date: DateTime
  home: Boolean
  opponentId: String
  scored: Int
  seasonId: String
}

input UpdatePlayerInput {
  active: Boolean
  birthDate: DateTime
  country: String
  countryCode: String
  firstName: String
  image: String
  lastName: String
}

input UpdateSeasonInput {
  startDate: DateTime!
}

input UpdateUserInput {
  email: String
  image: String
  name: String
}

type User {
  accounts: [Account!]!
  email: String
  emailVerified: DateTime
  id: ID!
  image: String
  name: String
  ratings: [Rating!]!
  role: Role!
  sessions: [Session!]!
}

type VerificationToken {
  expires: DateTime!
  identifier: String!
  token: String!
}