// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nexusPrisma {
  provider = "nexus-prisma"
  output = "../graphql/generated/nexusTypes"
}


enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  oauth_token        String?   @db.Text
  oauth_token_secret String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  role          Role      @default(USER)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  country     String        @default("France")
  countryCode String        @default("FR")
  birthDate   DateTime      @db.Date
  active      Boolean       @default(true)
  image       String        @default("")
  matches     MatchPlayer[]
  seasons     SeasonPlayer[]
  ratings     Rating[]
  
  @@unique([firstName, lastName])
}

model Club {
  id String @id @default(cuid()) 
  name String @unique
  abbreviation String 
  primary String
  secondary String
  logo String @default("")
  matches Match[]
}


model Season {
  id        String   @id @default(cuid())
  startDate DateTime @unique @db.Date
  matches   Match[]
  players   SeasonPlayer[]
}

model Competition {
  id           String  @id @default(cuid())
  name         String  @unique
  abbreviation String  @unique
  matches      Match[]
}

model Match {
  id            String        @id @default(cuid())
  date          DateTime      @db.Date
  home          Boolean       @default(true)
  scored        Int
  conceeded     Int
  active        Boolean       @default(false)
  archived      Boolean       @default(false)
  competitionId String
  seasonId      String
  opponentId    String
  players       MatchPlayer[]
  ratings       Rating[]

  opponent    Club @relation(fields: [opponentId], references: [id])
  competition Competition @relation(fields: [competitionId], references: [id])
  season      Season      @relation(fields: [seasonId], references: [id])

  @@unique([date, opponentId])
}

model MatchPlayer {
  id       String @id @default(cuid())
  playerId String
  matchId  String

  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, matchId])
}

model SeasonPlayer {
  id        String @id @default(cuid())
  playerId  String
  seasonId  String

  player    Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  season    Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@unique([playerId, seasonId])
}

model Rating {
  id       String @id @default(cuid())
  userId   String
  matchId  String
  playerId String
  rating   Float

  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@unique([playerId, matchId, userId])
}